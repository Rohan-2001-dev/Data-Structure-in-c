/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#define n 9
#define e 6
#define infinity 999
typedef struct node{
    int v;
    int d;
    int p;
}node;
node g[e];
int visit[e],grp[e][e],final[e][3],s,d;
void init(){
    int i,j,k;
    for(i=0;i<e;i++){
        for(j=0;j<e;j++){
          grp[i][j]=0;
        }
        for(k=0;k<3;k++){
            final[i][k]=0;
        }
        
            g[i].v=i;
            g[i].d=infinity;
            g[i].p=NULL;
        
        visit[i]=0;
    }
}
void create(){
    int i,j,k,l;
    for(i=0;i<n;i++){
        printf("enter the vertex v1,v2 and their length: ");
        scanf("%d %d %d",&j,&k,&l);
        grp[j][k]=l;
        grp[k][j]=l;
    }
    printf("please enter the source vertex and destination vertex: ");
    scanf("%d %d",&s,&d);
    g[s].p=s;
    g[s].d=0;
    
}
void display(){
    int i ,j;
    for(i=0;i<e;i++){
        for(j=0;j<e;j++){
            printf(" %d ",grp[i][j]);
        }
        printf("\n");
    }
}
int sort(){
    int i,j=100,k;
    for(i=0;i<e;i++){
        if(visit[i]!=1 ){
            if(j>g[i].d ){
                j=g[i].d;
                k=i;
            }
        }
    }
    return k;
}
void f_short_dist(){
    int i,j,k;
    for(i=0;i<e-1;i++){
         j=sort();
        for(k=0;k<e;k++){
          if(grp[j][k]!=0){
              if(g[k].d>(g[j].d+grp[j][k])){
                  g[k].d=g[j].d+grp[j][k];
                  g[k].p=g[j].v;
              }
          }
      }
      visit[g[j].v]=1;
    }
}
void graph(){
    int i=d,j,k=0;
    f_short_dist();
    while(i!=s){
         final[k][0]=g[i].v;
         final[k][1]=g[i].p;
         final[k][2]=g[i].d;
         printf("i=%d k=%d final[k][0]=%d final[k][1]=%d final[k][2]=%d",i,k,final[k][0],final[k][1],final[k][2]);
         k++;
         i=g[i].p;
        
    }
    final[k][0]=g[i].v;
    final[k][1]=g[i].p;
    final[k][2]=g[i].d;
    printf("i=%d k=%d final[k][0]=%d final[k][1]=%d final[k][2]=%d",i,k,final[k][0],final[k][1],final[k][2]);
    for(i=k;i>=0;i--){
        printf(" vertex v1 %d and v2 %d = length %d ",final[i][0],final[i][1],final[i][2]);
         printf("\n");
    }
    
}
int main()
{
    init();
    create();
    display();
    graph();
    printf("the shortest path is %d ",g[d].d);

    return 0;
}
